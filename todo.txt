Note: Sorted by order of importance


Must have / basic functionallity (for the project's idea, disregarding MOE's requirements):
- Define virus as the whatsapp application: `ps aux | grep WhatsApp` - DONE
- find a virus by checking if name of a running proces is name of a virus - DONE
- prevent virus from doing its things (kill it) - DONE


Important - must for project (MOE's) requirements:
    MOE's Requirements Concluded:
        - At least 4 OOP classes - DONE
        - Socket-based server and client - DONE
        - Multi-client server - DONE
        - Communication protocol - DONE
        - Threads usage - DONE
        - Files access / API / COM (??) / Hardware components (microphone, camera, etc.)  - DONE (I create and use the file database.db for users management)
        - Encryption - DONE
        - Removing potential vulnerabilities in project
        - Interactive user interface (GUI) - DONE

    OOP:
        - Make sure that the entire project uses at least 4 OOP classes - DONE
    Networking:
        - Create a protocol for the antivirus and its server - DONE
        - Create the Antivirus Server. Becuase a socket server is required.
          The server will get notification from an attacked client and send it to all clients. - DONE
        - Add multiclient functionallity to the server. Because a multiclient server is required - DONE
    Operating systems:
        - Make sure that the multiclient server is using multithreading - DONE
        - Make sure that the virus detector uses the OS API to detect the virus - (DONE, I think)
        - Install another kali linux in order to have 3 VMs - DONE
        - Decide which VM will run the server (preferrably not the router)
    Database:
        - Add to the antivirus server a database of Users - DONE
        - Implement registration and sign in screens in client - DONE
        - At least 4 input fields in registration - DONE
        - Save the user password in hash - DONE
    Security:
        - Use hashing for password management in the database - DONE
        - Add encryption to the protocol - DONE
        - Remove every potential vulnerability your project may have (XSS, SQL injection, etc.)
    GUI:
        - Add "virus detected" notification to the user - DONE
        
    Book:
        - Write the introduction
        - Draw this and put in the book:
          ---------------------             ------------             --------------
          |  Anti-Virus Logs  |    <--->    |  Sign In |    <--->    |  Register  |
          ---------------------             ------------             --------------
        - Columds in Users table in the database:
          1.  username (primary key)
          2.  base64_password
          3.  email
          4.  phone_number
          5.  signed_in
        - Add a screenshot of the list of used VMs which is in VMware Fusion Library
        - Add to technologies (modules) list: VMware Fusion
        - Note that the clients are Kali Linux machines
        - Explain in detail the conecpt of the LAN inside the VMs
        - Add a "super" drawing which describes the machines used in the project. Within each one, draw the project's
          softwares used in it.
          Think of it like combining the drawing of the machines in Notes app and the drawing in drawio which is in this repo.
        - Add definitions (הגדרות) section which explains the meaning of each phrase you use in the book
          (for exampe, VM, virus, etc.), in order to make things clear.
        - Exaplain that you saved the user password in the database as a Scrypt hash (explain what is Scrypt)
          and then you base64 encoded (explain what is base64 encoding) that hash and this is what's saved in the database.
          Also expalin why you encrypted the password twice - because the Scrypt hash is returned as bytes object,
          and you need to save the password as a string the database, but you can't use str.decode()
          because the Scrypt hash has unencodeable characters.
        - Note that use python's naming convention and this is why some variables and classes names may start with
          an underscore (_), indicating they're for private use only.
        - Note how you created the DNS server in the router and how you configured the clients to connect to this server


General needs:
- Read the files Nir sent you, in order to understand how you write the book properly and to add other ways to detect viruses
  (signatures, creating / opening / deleting files, etc.)
- Search about UML diagrams for the "super drawing"


Nice to have:
    Regarding outer network (host VM):
        - Create a simple vulnerable app (which theoretically the virus will exploit) [VMs] - DONE
        - Make the vulnerable app open to the web [VMs] - DONE
        - Create a virus [Host OS]
        - Create a virus server that attacks the vulnerable web app and runs the virus on the victim PC [Host OS]
        - Add to the virus and its server command running functionallity [Host OS]
    Regarding User:
        - Add option to log out (implement in server and database as well) - DONE
        - Add option to remove account (implement in server and database as well)
        - Add in registration an option to specify the virus the user wants to kill
          (check if you can implement that becuase the anti virus is needed for this)
        - Add settings screen:
            1. (Think if you can even do that) Option to change the virus name the user would like to kill, and more
            2. Options to modify user details
        - Change phone number field to password hint field, and if the user gets the error "Password is incorrect"
          a lot of times (decide how many times), display the hint for the password for the user
        - Add limitation to the registration form:
          1.  No empty fields
          2.  Phone number only like: xxx-xxxxxxx
          3.  Email address only like: user@example.com
          4.  Password: betweem 4 and 20 characters
    Regarding Anti Virus:
        - Change the string the anti virus is sending to the server to include the name of the process that was killed
          and the hour it was killed (13:05 for example)
    Regrading the LAN:
        - Add a DNS server to the router, and connect the clients to it - DONE
    General:
        - Seperate the files in source_code folder into sub-folders (__init__.py is required)
        - Modify the README.md file in this repo to explain everything about this project (do it only when you have free time because it's not essential.
          preferrably after submitting the project to MOE)
